
*** Logging ***

Within the HyCube library the loggers are accessed through the static methods of class net.hycube.logging.LogHelper. The methods provide access to three loggers (Apache commons.logging):

* user log (net.hycube.log.user):
The logger used for messages that should be logged at the user (application level). No stack trace should be presented in the user log - just a message briefly describing the event. This logger should be considered node state monitoring log - only major state changes should be logged.

* dev log (net.hycube.log.dev):
The logger used for development, debugging purposes. The log entries should contain full description of the event, including the stack trace, if applicable. For individual classes, separate loggers (hierarchical) may be created, following the naming convention: net.hycube.log.dev.[full_class_name], allowing defining logging levels for individual packages/classes. For example: "net.hycube.log.dev.net.hycube.join" or "net.hycube.log.dev.net.hycube.join.searchjoin.HyCubeSearchJoinManager".

* msg log (net.hycube.log.messages)
The logger used for logging information about messages being sent or processed by nodes - used for development, debugging pusposes.

The table below presents the guidelines for choosing logging levels for loggers used within the library:

------------------------------------------------------------------------------------------------------------------------------------------------------
	Logger		|	Level	|	Events*
------------------------------------------------------------------------------------------------------------------------------------------------------
	user log	|   fatal   |   no recoverable error, app termination
				|   error   |   error events that user should be informed about, like for monitoring window, includes events when api returns errors
				|   warn    |   warning - possible error, but the application may continue
				|   info    |   interesting events
				|   debug   |   less important events
				|   trace   |   least important events at lower level
----------------|-----------|-------------------------------------------------------------------------------------------------------------------------
	dev log		|   fatal   |   no recoverable errors causing application termination
				|   error   |   errors, exceptions that are not rethrown, external errors or some other errors that should be logged
				|   warn    |   warning - possible error, but the application may continue
				|   info    |   important events
				|   debug   |   less important events, details, data being processed
				|   trace   |   messages informing about current place of execution, least important events, details and data being processed
----------------|-----------|------------------------------------------------------------------------------------------------------------------------
	msg log		|   fatal   |   -
				|   error	|   invalid packet send try
				|   warn	|   invalid packet received
				|   info	|   packet sent, packet received
				|   debug	|   more details about packets being sent/received, packet propagation through layer stack
				|   trace	|   logs detailed message processing
------------------------------------------------------------------------------------------------------------------------------------------------------





*** Exceptions ***

- Exceptions should be logged only once, just before throwing the exceptions outside the library (API) scope. Logging the same exception stack trace more than once can confuse the programmer examining the stack trace about the original source of exception. The only place that should log and throw are well defined entry points. Logging and throwing might be however allowed in certain situations, when the information logged is of a great importance and requires special attention.
- Whenever an exception is caught and thrown, the thrown exception should include the whole stack trace, the exception caught as a nested exception.
- Exceptions thrown outside the API should not be inner classes
- Exceptions that may be processed outside the API should be checked exceptions
- Throwing unchecked exceptions implicitly outside the API (e.g. exceptions thrown from the JRE classes called by HyCube) should be prevented. Whenever the input data processing might cause throwing an unchecked exception, the data should be validated by the HyCube code before processing (if possible), and any invalid input should be processed by the HyCube code, and, if necessary, an exception should be thrown outside the library.
- Runtime exceptions that are explicitly thrown outside the API should be encapsulated in UnrecoverableRuntimeException instances (cause property)
- Runtime exceptions thrown implicitly (thrown from classes called by HyCube, not being caught/processed by HyCube code) should not be logged. Any explicitly thrown (HyCube-level) exceptions should be logged just befor throwing outside the API. 






*** Other ***

- Use of factory methods - allows returning objects of sub-classes

- Use of factory objects - to allow the use of factory objects implementing a common interface, allowing instantiation of specific-type objects (implementing a common interface), maintaining the implementation abstraction

- Use of protected fields and methods so that classes are extendable


